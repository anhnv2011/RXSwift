import UIKit
import RxSwift
import RxCocoa
//https://fxstudio.dev/rxswift-time-based-operators/
let elementsPerSecond = 1.0
let maxElements = 5
let replayedElements = 1
let replayDelay: TimeInterval = 3
let bag = DisposeBag()
func printValue(_ string: String) {
   let d = Date()
   let df = DateFormatter()
   df.dateFormat = "ss.SSSS"
   
   print("\(string) --- at \(df.string(from: d))")
}
/*
 Observable<Int>.create kh√° l√† quen thu·ªôc r·ªìi. Trong closure ƒë√≥, ch√∫ng ta s·∫Ω x·ª≠ l√Ω logic. Nh·ªõ ph·∫£i return v·ªÅ 1 Disposables nha.
 S·ª≠ d·ª•ng DispatchSource.makeTimerSource ƒë·ªÉ t·∫°o ra 1 timer tr√™n main queue
 Cung c·∫•p 1 closure cho source ƒë·ªÉ x·ª≠ l√Ω s·ª± ki·ªán sau m·ªói v√≤ng l·∫∑p th·ªùi gian
 source.schedule l√™n k·∫ø ho·∫°ch ph√°t d·ªØ li·ªáu theo c√°c tham s·ªë tr√™n
 source.resume() ƒë·ªÉ k√≠ch ho·∫°t
 V·ªÅ m·∫∑t Disposables.create th√¨ ch√∫ng ta handle lu√¥n lu√¥n vi·ªác d·ª´ng souce t·∫°i ƒë√¢y. ƒê√¢y c≈©ng ch√≠nh l√† th·∫Øc m·∫Øc l√¢u nay v·ªõi h√†m create ƒë·ªÉ l√†m g√¨.
 */

//example(of: "Basic") {
//
//
//    let observable = Observable<Int>.create({ observer -> Disposable in
//        var value = 1
//        let source = DispatchSource.makeTimerSource(queue: .main)
//        source.setEventHandler {
//            if value <= maxElements {
//                observer.onNext(value)
//            }
//            value += 1
//        }
//        source.schedule(deadline: .now(), repeating: 1.0/elementsPerSecond, leeway: .nanoseconds(0))
//        source.resume()
//        return Disposables.create {
//            source.suspend()
//        }
//    })
//
//            observable
//                .subscribe(onNext: { value in
//                    print("üîµ : ", value)
//                }, onCompleted: {
//                    print("üîµ Completed")
//                }, onDisposed: {
//                    print("üîµ Disposed")
//                })
//                .disposed(by: bag)
//
//
//    /*
//
//     üîµ :  1
//     üîµ :  2
//     üîµ :  3
//     üîµ :  4
//     üîµ :  5
//
//     */
//}










//example(of: "replay") {
//    let observable = Observable<Int>.create({ observer -> Disposable in
//        var value = 1
//        let source = DispatchSource.makeTimerSource(queue: .main)
//        source.setEventHandler {
//            if value <= maxElements {
//                observer.onNext(value)
//            }
//            value += 1
//        }
//        source.schedule(deadline: .now(), repeating: 1.0/elementsPerSecond, leeway: .nanoseconds(0))
//        source.resume()
//        return Disposables.create {
//            source.suspend()
//        }
//    })
//
//
//
//
//
//    DispatchQueue.main.asyncAfter(deadline: .now()) {
//        observable
//                .subscribe(onNext: { value in
//                    printValue("üîµ : \(value)")
//                }, onCompleted: {
//                    print("üîµ Completed")
//                }, onDisposed: {
//                    print("üîµ Disposed")
//                })
//                .disposed(by: bag)
//        }
//
//    let replaySource = observable.replay(0)
//    DispatchQueue.main.asyncAfter(deadline: .now() + replayDelay) {
//        replaySource
//                .subscribe(onNext: { value in
//                    printValue("üî¥ : \(value)")
//                }, onCompleted: {
//                    print("üî¥ Completed")
//                }, onDisposed: {
//                    print("üî¥ Disposed")
//                })
//                .disposed(by: bag)
//        }
//    //MARK:- c·∫ßn th√™m
//    replaySource.connect()
///*
////    --- Example of: replay ---
//
////    üîµ : 1 --- at 06.8810
////    üîµ : 2 --- at 07.8770
////    üîµ : 3 --- at 08.8770
////    üî¥ : 4 --- at 09.8470
////    üîµ : 4 --- at 09.8770
////    üî¥ : 5 --- at 10.8460
////    üîµ : 5 --- at 10.8770
//
//sau 3 s th√¨ b√≥ng ƒë·ªè ch·∫°y, nh∆∞ng n√≥ ch·ªâ b·∫Øt ƒë·∫ßu t·ª´ 4 v√¨ m√¨nh set replay(0)
//     n·∫øu set replay(1) th√¨ b√≥ng ƒë·ªè ch·∫°y t·ª´ 3
//*/
//}

example(of: "replayall") {
    let observable = Observable<Int>.create({ observer -> Disposable in
        var value = 1
        let source = DispatchSource.makeTimerSource(queue: .main)
        source.setEventHandler {
            if value <= maxElements {
                observer.onNext(value)
            }
            value += 1
        }
        source.schedule(deadline: .now(), repeating: 1.0/elementsPerSecond, leeway: .nanoseconds(0))
        source.resume()
        return Disposables.create {
            source.suspend()
        }
    })

    let replaySource = observable.replayAll()
    DispatchQueue.main.asyncAfter(deadline: .now()) {

        observable
        .subscribe(onNext: { value in
            printValue("üîµ : \(value)")
        }, onCompleted: {
            print("üîµ Completed")
        }, onDisposed: {
            print("üîµ Disposed")
        })
        .disposed(by: bag)
    }

    DispatchQueue.main.asyncAfter(deadline: .now() + replayDelay) {
        replaySource
            .subscribe(onNext: { value in
                printValue("üî¥ : \(value)")
            }, onCompleted: {
                print("üî¥ Completed")
            }, onDisposed: {
                print("üî¥ Disposed")
            })
            .disposed(by: bag)
    }

    replaySource.connect()
}
